input createFoodInput {
  data: FoodInput
}

type createFoodPayload {
  food: Food
}

input createFoodtypeInput {
  data: FoodtypeInput
}

type createFoodtypePayload {
  foodtype: Foodtype
}

input createOrdersInput {
  data: OrdersInput
}

type createOrdersPayload {
  order: Orders
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteFoodInput {
  where: InputID
}

type deleteFoodPayload {
  food: Food
}

input deleteFoodtypeInput {
  where: InputID
}

type deleteFoodtypePayload {
  foodtype: Foodtype
}

input deleteOrdersInput {
  where: InputID
}

type deleteOrdersPayload {
  order: Orders
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related: [ID]
}

type Food {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  foodtype: Foodtype
  smallprice: Float
  mediumprice: Float
  largeprice: Float
  unitprice: Float
  weightprice: Float
}

type FoodAggregator {
  count: Int
  sum: FoodAggregatorSum
  avg: FoodAggregatorAvg
  min: FoodAggregatorMin
  max: FoodAggregatorMax
}

type FoodAggregatorAvg {
  smallprice: Float
  mediumprice: Float
  largeprice: Float
  unitprice: Float
  weightprice: Float
}

type FoodAggregatorMax {
  smallprice: Float
  mediumprice: Float
  largeprice: Float
  unitprice: Float
  weightprice: Float
}

type FoodAggregatorMin {
  smallprice: Float
  mediumprice: Float
  largeprice: Float
  unitprice: Float
  weightprice: Float
}

type FoodAggregatorSum {
  smallprice: Float
  mediumprice: Float
  largeprice: Float
  unitprice: Float
  weightprice: Float
}

type FoodConnection {
  values: [Food]
  groupBy: FoodGroupBy
  aggregate: FoodAggregator
}

type FoodConnection_id {
  key: ID
  connection: FoodConnection
}

type FoodConnectionCreatedAt {
  key: DateTime
  connection: FoodConnection
}

type FoodConnectionDescription {
  key: String
  connection: FoodConnection
}

type FoodConnectionFoodtype {
  key: ID
  connection: FoodConnection
}

type FoodConnectionImage {
  key: ID
  connection: FoodConnection
}

type FoodConnectionLargeprice {
  key: Float
  connection: FoodConnection
}

type FoodConnectionMediumprice {
  key: Float
  connection: FoodConnection
}

type FoodConnectionName {
  key: String
  connection: FoodConnection
}

type FoodConnectionSmallprice {
  key: Float
  connection: FoodConnection
}

type FoodConnectionUnitprice {
  key: Float
  connection: FoodConnection
}

type FoodConnectionUpdatedAt {
  key: DateTime
  connection: FoodConnection
}

type FoodConnectionWeightprice {
  key: Float
  connection: FoodConnection
}

type FoodGroupBy {
  _id: [FoodConnection_id]
  createdAt: [FoodConnectionCreatedAt]
  updatedAt: [FoodConnectionUpdatedAt]
  name: [FoodConnectionName]
  description: [FoodConnectionDescription]
  image: [FoodConnectionImage]
  foodtype: [FoodConnectionFoodtype]
  smallprice: [FoodConnectionSmallprice]
  mediumprice: [FoodConnectionMediumprice]
  largeprice: [FoodConnectionLargeprice]
  unitprice: [FoodConnectionUnitprice]
  weightprice: [FoodConnectionWeightprice]
}

input FoodInput {
  name: String
  description: String
  image: ID
  foodtype: ID
  smallprice: Float
  mediumprice: Float
  largeprice: Float
  unitprice: Float
  weightprice: Float
}

type Foodtype {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  description: String
  image: UploadFile
  foods(sort: String, limit: Int, start: Int, where: JSON): [Food]
}

type FoodtypeAggregator {
  count: Int
}

type FoodtypeConnection {
  values: [Foodtype]
  groupBy: FoodtypeGroupBy
  aggregate: FoodtypeAggregator
}

type FoodtypeConnection_id {
  key: ID
  connection: FoodtypeConnection
}

type FoodtypeConnectionCreatedAt {
  key: DateTime
  connection: FoodtypeConnection
}

type FoodtypeConnectionDescription {
  key: String
  connection: FoodtypeConnection
}

type FoodtypeConnectionImage {
  key: ID
  connection: FoodtypeConnection
}

type FoodtypeConnectionName {
  key: String
  connection: FoodtypeConnection
}

type FoodtypeConnectionUpdatedAt {
  key: DateTime
  connection: FoodtypeConnection
}

type FoodtypeGroupBy {
  _id: [FoodtypeConnection_id]
  createdAt: [FoodtypeConnectionCreatedAt]
  updatedAt: [FoodtypeConnectionUpdatedAt]
  name: [FoodtypeConnectionName]
  description: [FoodtypeConnectionDescription]
  image: [FoodtypeConnectionImage]
}

input FoodtypeInput {
  name: String
  description: String
  image: ID
  foods: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

union Morph = Food | createFoodPayload | updateFoodPayload | deleteFoodPayload | FoodConnection | FoodAggregator | FoodAggregatorSum | FoodAggregatorAvg | FoodAggregatorMin | FoodAggregatorMax | FoodGroupBy | FoodConnection_id | FoodConnectionCreatedAt | FoodConnectionUpdatedAt | FoodConnectionName | FoodConnectionDescription | FoodConnectionImage | FoodConnectionFoodtype | FoodConnectionSmallprice | FoodConnectionMediumprice | FoodConnectionLargeprice | FoodConnectionUnitprice | FoodConnectionWeightprice | Orders | createOrdersPayload | updateOrdersPayload | deleteOrdersPayload | OrdersConnection | OrdersAggregator | OrdersGroupBy | OrdersConnection_id | OrdersConnectionCreatedAt | OrdersConnectionUpdatedAt | OrdersConnectionAddress | OrdersConnectionPostalCode | OrdersConnectionCity | Foodtype | createFoodtypePayload | updateFoodtypePayload | deleteFoodtypePayload | FoodtypeConnection | FoodtypeAggregator | FoodtypeGroupBy | FoodtypeConnection_id | FoodtypeConnectionCreatedAt | FoodtypeConnectionUpdatedAt | FoodtypeConnectionName | FoodtypeConnectionDescription | FoodtypeConnectionImage | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnection_id | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole

type Mutation {
  createFood(input: createFoodInput): createFoodPayload
  updateFood(input: updateFoodInput): updateFoodPayload
  deleteFood(input: deleteFoodInput): deleteFoodPayload
  createOrders(input: createOrdersInput): createOrdersPayload
  updateOrders(input: updateOrdersInput): updateOrdersPayload
  deleteOrders(input: deleteOrdersInput): deleteOrdersPayload
  createFoodtype(input: createFoodtypeInput): createFoodtypePayload
  updateFoodtype(input: updateFoodtypeInput): updateFoodtypePayload
  deleteFoodtype(input: deleteFoodtypeInput): deleteFoodtypePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Orders {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: String!
  postalCode: String!
  city: String!
}

type OrdersAggregator {
  count: Int
}

type OrdersConnection {
  values: [Orders]
  groupBy: OrdersGroupBy
  aggregate: OrdersAggregator
}

type OrdersConnection_id {
  key: ID
  connection: OrdersConnection
}

type OrdersConnectionAddress {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionCity {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionCreatedAt {
  key: DateTime
  connection: OrdersConnection
}

type OrdersConnectionPostalCode {
  key: String
  connection: OrdersConnection
}

type OrdersConnectionUpdatedAt {
  key: DateTime
  connection: OrdersConnection
}

type OrdersGroupBy {
  _id: [OrdersConnection_id]
  createdAt: [OrdersConnectionCreatedAt]
  updatedAt: [OrdersConnectionUpdatedAt]
  address: [OrdersConnectionAddress]
  postalCode: [OrdersConnectionPostalCode]
  city: [OrdersConnectionCity]
}

input OrdersInput {
  address: String!
  postalCode: String!
  city: String!
}

type Query {
  food(id: ID!): Food
  foods(sort: String, limit: Int, start: Int, where: JSON): [Food]
  foodsConnection(sort: String, limit: Int, start: Int, where: JSON): FoodConnection
  order(id: ID!): Orders
  orders(sort: String, limit: Int, start: Int, where: JSON): [Orders]
  ordersConnection(sort: String, limit: Int, start: Int, where: JSON): OrdersConnection
  foodtype(id: ID!): Foodtype
  foodtypes(sort: String, limit: Int, start: Int, where: JSON): [Foodtype]
  foodtypesConnection(sort: String, limit: Int, start: Int, where: JSON): FoodtypeConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateFoodInput {
  where: InputID
  data: FoodInput
}

type updateFoodPayload {
  food: Food
}

input updateFoodtypeInput {
  where: InputID
  data: FoodtypeInput
}

type updateFoodtypePayload {
  foodtype: Foodtype
}

input updateOrdersInput {
  where: InputID
  data: OrdersInput
}

type updateOrdersPayload {
  order: Orders
}

input updateRoleInput {
  where: InputID
  data: RoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: UserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""
The `Upload` scalar type represents a file upload promise that resolves an
object containing `stream`, `filename`, `mimetype` and `encoding`.
"""
scalar Upload

type UploadFile {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
}

input UserInput {
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsPermission {
  _id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  _id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
